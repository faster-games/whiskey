
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

namespace FasterGames.Whiskey
{    
    
#if UNITY_EDITOR
/// <summary>
/// Custom PropertyDrawer for <see cref="RefMutableGameObject"/>s and <see cref="RefImmutableGameObject"/>s
/// </summary>
[UnityEditor.CustomPropertyDrawer(typeof(RefMutableGameObject))]
[UnityEditor.CustomPropertyDrawer(typeof(RefImmutableGameObject))]
public class GameObjectRefEditor : UnityEditor.PropertyDrawer
{
    /// <summary> Cached style to use to draw the popup button. </summary>
    private GUIStyle popupStyle;

    public override void OnGUI(Rect position, UnityEditor.SerializedProperty property, GUIContent label)
    {
        if (popupStyle == null)
        {
            popupStyle = new GUIStyle(GUI.skin.GetStyle("PaneOptions"));
            popupStyle.imagePosition = ImagePosition.ImageOnly;
        }

        UnityEditor.EditorGUI.BeginProperty(position, label, property);
        
        // draw label
        position = UnityEditor.EditorGUI.PrefixLabel(position, GUIUtility.GetControlID(FocusType.Passive), label);
        
        // calculate rects
        var dropdownRect = new Rect(position.x - (popupStyle.fixedWidth + popupStyle.margin.right), position.y, popupStyle.fixedWidth + popupStyle.margin.right, position.height);
        var valueRect = new Rect(position.x, position.y, position.width, position.height);

        var useConstantProp = property.FindPropertyRelative("UseConstant");
        var selection = UnityEditor.EditorGUI.Popup(dropdownRect, useConstantProp.boolValue ? 0 : 1, new string[] { "Constant", "Object" }, popupStyle);

        // logic for swapping constant and object
        if (selection == 1 && useConstantProp.boolValue)
        {
            useConstantProp.boolValue = false;
        }
        else if (selection == 0 && !useConstantProp.boolValue)
        {
            useConstantProp.boolValue = true;
        }

        // logic for rendering the field
        if (useConstantProp.boolValue)
        {
            UnityEditor.EditorGUI.PropertyField(valueRect, property.FindPropertyRelative("Constant"), GUIContent.none);
        }
        else
        {
            UnityEditor.EditorGUI.PropertyField(valueRect, property.FindPropertyRelative("Object"), GUIContent.none);
        }
        
        UnityEditor.EditorGUI.EndProperty();
    }
}
#endif

}
